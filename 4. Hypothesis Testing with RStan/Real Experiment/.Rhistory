library(rstan)
library(ggmcmc) # для классных диагностических графичков
set.seed(100)
N <- 500
true_mu <- 90
test_scores <- rnorm(N, true_mu, 15)
data_1 <- list(N = length(test_scores), X = test_scores) # формат данных для stan - список с переменными
model_1 <-
'
data {
int<lower = 0> N;  // размер выборки (больше 0)
vector[N] X; // наблюдения - вектор длины N
}
parameters {
real<lower = 0> mu; // среднее нормального распределения, которое необходимо оценить
}
model {
mu ~ normal(100, 25); // априорное распределение среднего
X ~ normal(mu, 15); // функция правдоподобия
}
'
fit_1 <- stan(model_code = model_1, data = data_1, chains = 3, iter = 5000, warmup = 1000) # ! нужно всегда использовать несколько цепей для диагностики результата
print(fit_1)
posterior_mu <- ggs(fit_1) # считываем сэмплы в удобном для ggmcmc формате
ggmcmc(D = posterior_mu, file = NULL, plot = 'ggs_histogram') # апостериорное распределение параметра
mean(posterior_mu$value > 90) # какую часть апостериорного распределения составляют средние больше 90?
mean(posterior_mu$value > 90) # какую часть апостериорного распределения составляют средние больше 90?
ggmcmc(D = posterior_mu, file = NULL, plot = 'ggs_traceplot') # должен выглядить как белый шум, все цепи варьируют вокруг одинаковых значений. Если нет - можно попробовать увеличить warmup
ggmcmc(D = posterior_mu, file = NULL, plot = 'ggs_compare_partial') # полное и частичное апостериорное распределение в идеале должны полностью перекрывать друг друга
ggmcmc(D = posterior_mu, file = NULL, plot = 'ggs_autocorrelation') # в идеале: все значения после 1 на нуле или очень близки к нулю
model_2 <-
'
data {
int<lower = 0> N;  // размер выборки (больше 0)
vector[N] X; // наблюдения - вектор длины N
}
parameters {
real<lower = 0> mu; // среднее нормального распределения, которое необходимо оценить
real<lower = 0> sigma; // стандартное отклонение нормального распределения, которое необходимо оценить
}
model {
mu ~ normal(100, 25); // априорное распределение среднего
sigma ~ cauchy(0,3); // априорное распределение стандартного отклонения
X ~ normal(mu, sigma); // функция правдоподобия
}
'
fit_2 <- stan(model_code = model_2, data = data_1, chains = 3, iter = 5000, warmup = 1000)
print(fit_2)
posterior_fit_2 <- ggs(fit_2)
mean(posterior_fit_2$value > 90 & posterior_fit_2$Parameter == "mu")/mean(posterior_fit_2$Parameter == "mu")
ggmcmc(D = posterior_fit_2, file = NULL, plot = 'ggs_histogram')
ggmcmc(D = posterior_fit_2, file = NULL, plot = 'ggs_traceplot')
ggmcmc(D = posterior_fit_2, file = NULL, plot = 'ggs_compare_partial')
ggmcmc(D = posterior_fit_2, file = NULL, plot = 'ggs_autocorrelation')
